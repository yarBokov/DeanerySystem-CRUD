@page "/subjects"

@inject ISubjectService SubjectService
@inject IJSRuntime JsRuntime
@inject DialogService DialogService

<div class="container">
    <div class="d-flex justify-content-between align-items-center">
        <h3>Группы</h3>
        <button class="btn btn-primary btn-sm" @onclick="OpenSubjectFormAsync">+ Добавить предмет</button>
    </div>
    <hr />
    <table class="table">
        <thead>
            <tr>
                <th>#</th>
                <th>ID</th>
                <th>Название предмета</th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @if (_loading)
            {
                    <tr>
                        <td colspan="5" class="text-center">
                            Загрузка групп...
                        </td>
                    </tr>
            }
            else if (!_loading && (_subjects is null || !_subjects.Any()))
            {
                    <tr>
                        <td colspan="5" class="text-center">
                            Категории не найдены!
                        </td>
                    </tr>
            }
            else
            {
                int sno = 1;
                foreach (var subject in _subjects!)
                {
                    <tr>
                        <td>@(sno++)    </td>
                        <td>@subject.Id</td>
                        <td>@subject.Name</td>
                        <td>
                            <button id="changeContentButton" type="button" class="btn btn-outline-primary btn-sm" @onclick="() => EditSubjectAsync(subject)" 
                            disabled="@SubjectService.CheckIfNonEditable(subject)">Редактировать</button>
                        </td>
                        <td>
                            <button id="changeContentButton" type="button" class="btn btn-danger btn-sm" @onclick="() => DeleteSubjectAsync(subject)" 
                            disabled="@SubjectService.CheckIfNonEditable(subject)">Удалить предмет</button>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>
<dialog id="@_subjectFormDialogId">
    <SaveSubjectForm 
        Subject="_subjectModel"  
        OnSaveSubject="OnSaveSubject" 
        OnCloseForm="CloseSubjectFormAsync"/>
</dialog>

<style type="text/css">
    dialog{
        padding: 0;
        border: 2px solid black;
    }
</style>

@code {
    private const string _subjectFormDialogId = "subject-form";
    private bool _loading = false;
    private IEnumerable<Subject>? _subjects = null;

    private Subject _subjectModel = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadSubjectsAsync();
    }

    private async Task LoadSubjectsAsync()
    {
        _loading = true;
        try
        {
            _subjects = await SubjectService.GetSubjectsAsync();
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task OpenSubjectFormAsync() =>
        await JsRuntime.InvokeVoidAsync("window.openModal", _subjectFormDialogId);

    private async Task CloseSubjectFormAsync()
    {
        _subjectModel = new();
        await JsRuntime.InvokeVoidAsync("window.closeModal", _subjectFormDialogId);
    }

    private async Task EditSubjectAsync(Subject subject)
    {
        _subjectModel = await SubjectService.GetSubjectById(subject.Id);
        await OpenSubjectFormAsync();
    }

    private async Task OnSaveSubject(MethodResult saveGroupResult)
    {
        if (saveGroupResult.Status)
        {
            await AlertAsync("Группа сохранена!");
            await LoadSubjectsAsync();
            await CloseSubjectFormAsync();
        }
        else
        {
            await AlertAsync(saveGroupResult.Error!);
        }
    }

    private async Task DeleteSubjectAsync(Subject subject)
    {
        var result = await DialogService.Confirm("Вы собираетесь удалить запись? Данные нельзя будет восстановить", "Удаление записи", new ConfirmOptions() { OkButtonText = "Да", CancelButtonText = "Нет" });
        if (result is not true) return;
        var deleteCheck = await SubjectService.DeleteSubjectAsync(subject.Id);
        if (!deleteCheck.Status)
        {
            await JsRuntime.InvokeVoidAsync("console.log", deleteCheck.Error);
            return;
        }
        await LoadSubjectsAsync();
    }

    private async Task AlertAsync(string message)
    {
        await JsRuntime.InvokeVoidAsync("window.alert", message);
    }
}
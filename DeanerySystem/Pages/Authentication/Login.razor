@page "/authentication/login"
@using DeanerySystem.Models.Authentication;

@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@inject AccountService AccountService
@inject IPasswordHasher PasswordHasher

@if (_isProcessing)
{
    <div class="overlay position-fixed"></div>
    <div class="loading-wrapper d-flex justify-content-center align-items-center">
        <RadzenProgressBarCircular ShowValue="true" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Large">
            <Template>
                    Вход в систему...
            </Template>
        </RadzenProgressBarCircular>
    </div>
}
<RadzenText TextStyle="TextStyle.H5" TagName="TagName.H3">Вход</RadzenText>
<EditForm Model="_model" OnValidSubmit="LoginAsync">
    <DataAnnotationsValidator />
    <div class="container mt-5 d-flex justify-content-center">
        <div class="card" style="width: 450px">
            <div class="card-header">
                <h2>Вход</h2>
            </div>
            <div class="card-body">
                <div class="mb-3">
                    <label class="form-label">Введите ID пользователя</label>
                    <RadzenNumeric ShowUpDown="false" @bind-Value="_model.Id" class="form-control" TValue="int" Placeholder="Введите ваш ID" AutoComplete="false"/>
                    @*<InputNumber @bind-Value="_model.Id" class="form-control" placeholder="Введите ваш ID"/>*@
                    <ValidationMessage For="() => _model.Id" />
                </div>
                <div class="mb-3">
                    <label class="form-label">Пароль</label>
                    <RadzenPassword @bind-Value="_model.Password" class="form-control" Placeholder="Введите пароль" AutoComplete="false" />
                    @*<InputText type="password" @bind-Value="_model.Password" class="form-control" placeholder="Введите пароль" />*@
                    <ValidationMessage For="() => _model.Password" />
                </div>

                @if (!string.IsNullOrWhiteSpace(_errorMsg))
                {
                    <p class="text-danger">@_errorMsg</p>
                    if (mustRegister)
                    {
                        <NavLink href="/authentication/registration" class="link-light nav-link">Зарегистрироваться</NavLink>
                    }
                }
            </div>
            <div class="card-footer">
                <button type="submit" class="btn btn-success btn-sm">Войти</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    private LoginModel _model = new();

    private bool _isProcessing = false;
    private string? _errorMsg = null;
    private bool mustRegister = false;

    private async Task LoginAsync()
    {
        _errorMsg = null;
        _isProcessing = true;
        try
        {
            var userAccount = await AccountService.GetUserById(_model.Id);
            if (userAccount == null)
            {
                _errorMsg = "Пользователя с таким ID не существует. Зарегистрируйтесь!";
                mustRegister = true;
                _isProcessing = false;
            }
            mustRegister = false;
            if (!PasswordHasher.Verify(userAccount.HashedPassword, _model.Password))
            {
                _errorMsg = "Пароль не подходит! Попробуйте снова";
                _isProcessing = false;
            }
            if (_isProcessing)
            {
                var deaneryAuthStateProvider = (DeaneryAuthenticationStateProvider)AuthStateProvider;
                await deaneryAuthStateProvider.UpdateAuthenticationState(new UserSession
                    {
                        UserName = userAccount.Person.getFullName(),
                        Role = userAccount.Person.getUserRole()
                    });
                NavigationManager.NavigateTo("/", true);
            }
        }
        catch (Exception e)
        {
            _isProcessing = true;
            _errorMsg = e.Message;
        }
    }
}
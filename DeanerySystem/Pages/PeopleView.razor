@page "/teachers"
@inject IPersonService PersonService
@inject IGroupService GroupService
@inject DialogService DialogService

@if (_people == null)
{
    <p><em>Загрузка...</em></p>
}
else
{
        <style>
    .rz-grid-table {
        width: unset;
    }
</style>
    
    <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" 
        class="mt-0 mb-3" Text="Добавить новую запись" 
        Click="@InsertRow" Disabled=@(personToInsert != null || personToUpdate != null) />
    <br />
    <RadzenDataGrid @ref="peopleGrid" AllowAlternatingRows="false" AllowFiltering="true" AllowColumnResize="true"
        AllowPaging="true" PageSize="7" AllowSorting="true" EditMode="Radzen.DataGridEditMode.Single"
        Data="@_people" TItem="Person" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow" 
        Sort="@Reset" Page="@Reset" Filter="@Reset" ColumnWidth="200px">
        <Columns>
            <RadzenDataGridColumn TItem="Person" Property="SecondName" Title="Фамилия">
                <EditTemplate Context="person">
                    <RadzenTextBox @bind-Value="person.SecondName" Style="width:200px; display: block" Name="SecondName"/>
                    <RadzenRequiredValidator Text="Введите фамилию" Component="SecondName" Popup="true"/>
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Person" Property="FirstName" Title="Имя">
                <EditTemplate Context="person">
                    <RadzenTextBox @bind-Value="person.FirstName" Style="width:200px; display: block" Name="FirstName"/>
                    <RadzenRequiredValidator Text="Введите имя" Component="FirstName" Popup="true"/>
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Person" Property="PatherName" Title="Отчество">
                <EditTemplate Context="person">
                    <RadzenTextBox @bind-Value="person.PatherName" Style="width:200px; display: block" Name="PatherName"/>
                    <RadzenRequiredValidator Text="Введите отчество" Component="PatherName" Popup="true"/>
                </EditTemplate>
            </RadzenDataGridColumn>
@*
            <RadzenDataGridColumn TItem="Person" Property="Type" Title="Преподаватель(P)/Студент(S)">
                <EditTemplate Context="person">

                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Person" Property="Group.Name" Title="Группа" Width="200px">
                <EditTemplate Context="person">

                </EditTemplate>
            </RadzenDataGridColumn>*@

            <RadzenDataGridColumn TItem="Person" Context="person" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
                <Template Context="person">
                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(person))" @onclick:stopPropagation="true">
                    </RadzenButton>
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(person))"  @onclick:stopPropagation="true">
                    </RadzenButton>
                </Template>
                <EditTemplate Context="person">
                    <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(person))">
                    </RadzenButton>
                    <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@((args) => CancelEdit(person))">
                    </RadzenButton>
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(person))">
                    </RadzenButton>
                </EditTemplate>
            </RadzenDataGridColumn>
        </Columns>

    </RadzenDataGrid>
}
@code {
    RadzenDataGrid<Person> peopleGrid;
    IEnumerable<Person> _people;
    IEnumerable<Data.Entities.Group> originalGroups;
    IEnumerable<Data.Entities.Group> groupsToDisplay;
    char[] types = new char[] { 'P', 'S' };

    Person? personToUpdate;
    Person? personToInsert;

    private void Reset()
    {
        personToInsert = null;
        personToUpdate = null;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        originalGroups = await GroupService.GetGroupsAsync();
        _people = await PersonService.GetPeopleAsync();
        _people = _people.OrderBy(p => p.Type).ThenBy(p => p.SecondName);
    }

    private async Task InsertRow()
    {
        personToInsert = new Person();
        await peopleGrid.InsertRow(personToInsert);
    }

    private async Task SaveRow(Person person)
    {
        var result = await DialogService.Confirm("Вы собираетесь изменить данные?", "Редактирование", new ConfirmOptions() { OkButtonText = "Да", CancelButtonText = "Нет" });
        //person.Group.Name = await GroupService.GetGroupNameById(person.GroupId);
        if (result is true) await peopleGrid.UpdateRow(person);
    }

    private async Task EditRow(Person person)
    {
        personToUpdate = person;
        //personToUpdate.Group.Name = await GroupService.GetGroupNameById(person.GroupId);
        await peopleGrid.EditRow(person);
    }

    private async Task OnUpdateRow(Person person)
    {
        Reset();
        await PersonService.SavePersonAsync(person);
    }

    private async Task DeleteRow(Person person)
    {
        var result = await DialogService.Confirm("Вы собираетесь удалить запись? Данные нельзя будет восстановить", "Удаление записи", new ConfirmOptions() { OkButtonText = "Да", CancelButtonText = "Нет" });
        if (result is not true) return;
        Reset();

        if (_people.Contains(person))
        {
            //...
            await peopleGrid.Reload();
        }
        else
        {
            peopleGrid.CancelEditRow(person);
            await peopleGrid.Reload();
        }
    }

    private async Task OnCreateRow(Person person)
    {
        await PersonService.SavePersonAsync(person);
        personToInsert = null;
    }

    private void CancelEdit(Person person)
    {
        Reset();

        peopleGrid.CancelEditRow(person);

        PersonService.CheckEntries(person);
    }
}